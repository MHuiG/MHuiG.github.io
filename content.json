{"meta":{"title":"The Blog of MHuiG","subtitle":"Be Yourself, Make a Difference.","description":"The Blog of MHuiG","author":"MHuiG","url":"https://MHuiG.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-05-02T13:03:21.700Z","updated":"2020-05-02T13:03:21.700Z","comments":true,"path":"404.html","permalink":"https://mhuig.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2020-05-02T13:03:21.700Z","updated":"2020-05-02T13:03:21.700Z","comments":true,"path":"baidu_verify_DZhcJiT1Cb.html","permalink":"https://mhuig.github.io/baidu_verify_DZhcJiT1Cb.html","excerpt":"","text":"DZhcJiT1Cb"},{"title":"关于","date":"2020-05-02T13:03:21.700Z","updated":"2020-05-02T13:03:21.700Z","comments":true,"path":"about/index.html","permalink":"https://mhuig.github.io/about/index.html","excerpt":"","text":"MHuiG 关于我>_ 热爱技术，热爱创造。 极简主义者。 喜欢遥望星星存在过的地方。 var now = new Date(); function createtime() { var grt= new Date(\"08/19/2019 21:23:12\"); now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 ){hnum = \"0\" + hnum;} minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 ){mnum = \"0\" + mnum;} seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 ){snum = \"0\" + snum;} document.getElementById(\"timeDate\").innerHTML = \"本站已安全运行 \"+dnum+\" 天 \"; document.getElementById(\"times\").innerHTML = hnum + \" 小时 \" + mnum + \" 分 \" + snum + \" 秒\"; } setInterval(\"createtime()\",250); 本站使用Service Worker缓存策略, 您看到的可能是过时的浏览器缓存文件而非最新的网页如需要加载最新请按Ctrl+F5(Win)或⌘+shift+R(macOS)强制刷新"},{"title":"所有分类","date":"2020-05-02T13:03:21.700Z","updated":"2020-05-02T13:03:21.700Z","comments":true,"path":"categories/index.html","permalink":"https://mhuig.github.io/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-05-02T13:03:21.700Z","updated":"2020-05-02T13:03:21.700Z","comments":true,"path":"friends/index.html","permalink":"https://mhuig.github.io/friends/index.html","excerpt":"","text":"欢迎互换友链！ 举个栗子辅助工具 name: MHuiG url: https://mhuig.github.io avatar: https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png desc: 搞事情🤣 backgroundColor: skyblue 压缩图片 HTTPS 图床 网络加速工具"},{"title":"","date":"2020-05-02T13:03:21.700Z","updated":"2020-05-02T13:03:21.700Z","comments":true,"path":"mylist/index.html","permalink":"https://mhuig.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-05-02T13:03:21.700Z","updated":"2020-05-02T13:03:21.700Z","comments":true,"path":"tags/index.html","permalink":"https://mhuig.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"PDF测试","slug":"PDF测试","date":"2020-05-02T13:02:43.000Z","updated":"2020-05-02T13:03:21.700Z","comments":true,"path":"posts/323ed1b8.html","link":"","permalink":"https://mhuig.github.io/posts/323ed1b8.html","excerpt":"","text":"PDF测试","categories":[{"name":"实验性","slug":"实验性","permalink":"https://mhuig.github.io/categories/%E5%AE%9E%E9%AA%8C%E6%80%A7/"}],"tags":[{"name":"实验性","slug":"实验性","permalink":"https://mhuig.github.io/tags/%E5%AE%9E%E9%AA%8C%E6%80%A7/"}]},{"title":"大数据技术概述","slug":"大数据技术概述","date":"2020-05-01T00:02:39.000Z","updated":"2020-05-02T13:03:21.700Z","comments":true,"path":"posts/376025fe.html","link":"","permalink":"https://mhuig.github.io/posts/376025fe.html","excerpt":"","text":"大数据时代 第三次信息化浪潮根据IBM前首席执行官郭士纳的观点，IT领域每隔十五年就会迎来一次重大变革 信息化浪潮 发生时间 标志 解决问题 代表企业 第一次浪潮 1980年前后 个人计算机 信息处理 Intel、AMD、IBM、苹果、微软、联想、戴尔、惠普等 第二次浪潮 1995年前后 互联网 信息传输 雅虎、谷歌、阿里巴巴、百度、腾讯等 第三次浪潮 2010年前后 物联网、云计算和大数据 信息爆炸 将涌现出一批新的市场标杆企业 信息科技为大数据时代提供技术支撑 存储设备容量不断增加 CPU处理能力大幅提升 网络带宽不断增加 数据产生方式的变革促成大数据时代的来临 大数据的特征及数据科学面临的挑战 大数据概念 数据量大 数据类型繁多 处理速度快 价值密度低 大数据的影响图灵奖获得者、著名数据库专家Jim Gray 博士观察并总结人类自古以来，在科学研究上，先后历经了实验、理论、计算和数据四种范式 在思维方式方面，大数据完全颠覆了传统的思维方式： 全样而非抽样 效率而非精确 相关而非因果 大数据关键技术 技术层面 功能 数据采集 利用ETL工具将分布的、异构数据源中的数据如关系数据、平面数据文件等，抽取到临时中间层后进行清洗、转换、集成，最后加载到数据仓库或数据集市中，成为联机分析处理、数据挖掘的基础；或者也可以把实时采集的数据作为流计算系统的输入，进行实时处理分析 数据存储和管理 利用分布式文件系统、数据仓库、关系数据库、NoSQL数据库、云数据库等，实现对结构化、半结构化和非结构化海量数据的存储和管理 数据处理与分析 利用分布式并行编程模型和计算框架，结合机器学习和数据挖掘算法，实现对海量数据的处理和分析；对分析结果进行可视化呈现，帮助人们更好地理解数据、分析数据 数据隐私和安全 在从大数据中挖掘潜在的巨大商业价值和学术价值的同时，构建隐私数据保护体系和数据安全体系，有效保护个人隐私和数据安全 两大核心技术 大数据计算模式 代表性大数据技术Hadoop Hadoop—MapReduce MapReduce将复杂的、运行于大规模集群上的并行计算过程高度地抽象到了两个函数：Map和Reduce 编程容易，不需要掌握分布式并行编程细节，也可以很容易把自己的程序运行在分布式系统上，完成海量数据的计算 MapReduce采用“分而治之”策略，一个存储在分布式文件系统中的大规模数据集，会被切分成许多独立的分片（split），这些分片可以被多个Map任务并行处理 Hadoop—YARNYARN的目标就是实现“一个集群多个框架”，为什么？ 一个企业当中同时存在各种不同的业务应用场景，需要采用不同的计算框架 MapReduce实现离线批处理 使用Impala实现实时交互式查询分析 使用Storm实现流式数据实时分析 使用Spark实现迭代计算 这些产品通常来自不同的开发团队，具有各自的资源调度管理机制为了避免不同类型应用之间互相干扰，企业就需要把内部的服务器拆分成多个集群，分别安装运行不同的计算框架，即“一个框架一个集群” 导致问题 集群资源利用率低 数据无法共享 维护代价高 YARN的目标就是实现“一个集群多个框架”，即在一个集群上部署一个统一的资源调度管理框架YARN，在YARN之上可以部署其他各种计算框架由YARN为这些计算框架提供统一的资源调度管理服务，并且能够根据各种计算框架的负载需求，调整各自占用的资源，实现集群资源共享和资源弹性收缩可以实现一个集群上的不同应用负载混搭，有效提高了集群的利用率不同计算框架可以共享底层存储，避免了数据集跨集群移动 Spark Flink Beam","categories":[{"name":"BigData","slug":"bigdata","permalink":"https://mhuig.github.io/categories/bigdata/"}],"tags":[{"name":"BigData","slug":"bigdata","permalink":"https://mhuig.github.io/tags/bigdata/"}]},{"title":"Mac Code Test","slug":"macCodeTest","date":"2020-04-30T06:06:43.000Z","updated":"2020-05-02T13:03:21.700Z","comments":true,"path":"posts/91953e39.html","link":"","permalink":"https://mhuig.github.io/posts/91953e39.html","excerpt":"","text":"代码块全屏测试 How To Use? 导入库文件即可12&lt;link rel&#x3D;&#39;stylesheet&#39; href&#x3D;&#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;MHuiG&#x2F;blog-cdn@1.1.12&#x2F;css&#x2F;me.css&#39;&gt;&lt;script src&#x3D;&#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;MHuiG&#x2F;blog-cdn@1.1.12&#x2F;js&#x2F;me.js&#39;&gt;&lt;&#x2F;script&gt; cpp code12345678#include &lt;iostream&gt;using namespace std; int main() &#123; cout &lt;&lt; \"Hello, World!\"; return 0;&#125; python code123#!/usr/bin/pythonprint (\"Hello, Python!\") code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;const int SIZE = 5e6 + 1;struct edge&#123; int to_node, id; edge(int t, int i): to_node(t), id(i) &#123;&#125; ~edge() = default;&#125;;vector&lt;int&gt; edges[SIZE];vector&lt;edge&gt; querys[SIZE];int father[SIZE], mark[SIZE], ans[SIZE];int n, m, s;int getfa(int x)&#123; if (father[x] == x) return x; else return father[x] = getfa(father[x]);&#125;void tarjan(int x)&#123; mark[x] = 1; for (auto i = edges[x].begin(); i != edges[x].end(); i++) &#123; if (mark[*i]) continue; tarjan(*i); father[*i] = x; &#125; for (auto i = querys[x].begin(); i != querys[x].end(); i++) &#123; int y = (*i).to_node, id = (*i).id; if (mark[y] == 2) ans[id] = getfa(y); &#125; mark[x] = 2;&#125;int main()&#123; int u, v; scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;s); for (int i = 1; i &lt;= n; i++) &#123; father[i] = i; mark[i] = 0; &#125; for (int i = 1; i &lt; n; i++) &#123; scanf(\"%d%d\", &amp;u, &amp;v); edges[u].emplace_back(v); edges[v].emplace_back(u); &#125; int x, y; for (int i = 1; i &lt;= m; i++) &#123; scanf(\"%d%d\", &amp;x, &amp;y); if (x == y) ans[i] = 0; else &#123; querys[x].emplace_back(edge(y, i)); querys[y].emplace_back(edge(x, i)); &#125; &#125; tarjan(s); for (int i = 1; i &lt;= m; i++) printf(\"%d\\n\", ans[i]); return 0;&#125;","categories":[{"name":"实验性","slug":"实验性","permalink":"https://mhuig.github.io/categories/%E5%AE%9E%E9%AA%8C%E6%80%A7/"}],"tags":[{"name":"实验性","slug":"实验性","permalink":"https://mhuig.github.io/tags/%E5%AE%9E%E9%AA%8C%E6%80%A7/"}]},{"title":"图片墙","slug":"图片墙","date":"2020-04-28T04:05:43.000Z","updated":"2020-05-02T13:03:21.700Z","comments":false,"path":"posts/e9fadccb.html","link":"","permalink":"https://mhuig.github.io/posts/e9fadccb.html","excerpt":"","text":"* { margin: 0; padding: 0;} .list { width: 100%; margin: 0 auto; overflow: hidden; zoom: 1;} .list .ul { float: left; width: calc((100% - 100px)/4); margin: 0 10px;} .list .li { margin-bottom: 20px;} .list img { width: 100%; border-radius: 5px; vertical-align: top;} function URL(d){ d+=new Date().getTime() var s = \"https://picsum.photos/seed/\"+d+\"/200/300\" return s } var i=0; function WriteHtml(){ document.getElementsByClassName('list')[0].innerHTML+=` ` } WriteHtml(); WriteHtml(); WriteHtml(); WriteHtml(); $(window).scroll(function(){ var scrollTop = $(this).scrollTop(); var scrollHeight = $(document).height(); var windowHeight = $(this).height(); if(scrollTop + windowHeight > scrollHeight - 2000){ WriteHtml() } });","categories":[],"tags":[]},{"title":"时间之箭","slug":"yuque/时间之箭","date":"2020-04-22T01:42:43.000Z","updated":"2020-05-02T13:04:02.740Z","comments":true,"path":"posts/564714f9.html","link":"","permalink":"https://mhuig.github.io/posts/564714f9.html","excerpt":"时间就像一只箭，射向未知的前方，把过去永远留在后面。Time is like an arrow, shooting towards the unknown, leaving the past behind forever.","text":"时间就像一只箭，射向未知的前方，把过去永远留在后面。Time is like an arrow, shooting towards the unknown, leaving the past behind forever. 每个人 你所热爱的一切Every piece of everyone, of everything you love,你所憎恨的一切 of everything you hate, 你所拥有的最宝贵的东西 of everything you hold most precious, 在宇宙生命中最为伊始的几分钟内 was assembled by the forces of nature 由自然的力量合成 in the first few minutes of the universe, 在恒星的中心转化 transformed in the hearts of starts 或者在它们燃烧的消亡中诞生 or created in their fiery deaths 而当你去世的时候 And when you die, 这些碎片将回到宇宙中 those pieces will be returned to the universe 进入无限的死亡又重生的轮回之中 in the endless cycle of death and rebirth. 太阳的命运也是所有恒星的命运 The fate of the sun is the same as for all starts. 终有一天 他们都会消亡 One day, they must all eventually die 宇宙将会陷入永无止境的黑暗之中 and the cosmos will be plunged into eternal night. 这便是时间箭头最深远的影响 And this is the most profound consequence of the arrow of time. 我刚用相机捕捉到的 The light that I’ve just captured 这个光点二百五十万年前踏上了旅程 in my camera began its journey 2.5 million years ago. 那时地球上还没有人类 At that time, on Earth, there were no humans. 远古的祖先能人 Homo habilis, our distant ancestors, 正在非洲广袤的平原上漫步 wereroaming the plaints of Africa, 就是在那些光线 and as those light rays travelled 平行于无垠宇宙的同时 through the vastness of space. 人类不断进化 our species evolved,and thousands 一代又一代的生老病死 and thousands and thousands of qenerations of humans lived 周而复始 and died, 旅途开始的二百五十万年后 and then 2.5 million years after their journey began, 这些远道而来的信使 these messengers from the depths of space 穿越漫长的时间 and from way back in our past, 映入现在我们的眼帘 arrived here on Earth. 我们与那些遥远星系息息相关 we are in a very real sense connected to these qalaxies, 无论它们是如何与我们天各一方 no matter how far away they are across the universe, 那些经历过数十亿年旅行到达地球的光线 connected by the light 终究会把我们联系在一起 that’s journeved billions of ears to reach us. “生星时代” The Stelliferous Era - 恒星漫天的时代 the age of the starts. 我们的太阳只是银河系两千亿颗恒星中的一颗 Our sun is just one of 200 billion starts in our qalaxy. 我们的星系也只是可观测的宇宙范围内的 Our qalaxy is one of 100 bllion 一百亿个星系中的一个 in the observable universe. 数不尽的星球上有数不胜数的岛屿 And countless islands of countless stars. 当我们注意太空的时候 When we look out into space, 我们也是在寻找自己的起源 we are looking into our own origins. 我们的故事就是宇宙的故事 Our story is the story of the universe. 因为我们是恒星真正的孩子 Beacuse we are truly children of the starts. 注入进我们的身体的 and written into every atom 每一个原子和分子 and every molecule of our bodies 就是宇宙从大爆炸 is the entire history of the universe 到现在全部的历史 from the Big Bang to the present day. 对我们来说 像婚戒黄金一样的珍宝 It’s quite a thought that something as 实际上也可以在一颗遥远的 数百万光年 precious to us as the gold in a wedding ring was 甚至数十亿光年远的恒星上产生actually forged in the death of a distant star. 从宇宙起源到最后一个黑洞消失的这个过程中 as measured from its beainning to the evappration of the last black hole. 生命 正如我们所知life as we konw it, is only possible 只有百分之千亿分之for one thousandth of a billion billion billionth 千亿分之千分之一的可能性billion billion billionth billion billion billionth of a percent. 所以对于我来说 And that’s why for me 宇宙中最迷人的奇迹不是恒星 the most astonishing wonder of the universe isn’t a star 不是行星 也不是星系 or a planet or a galaxy 甚至根本不是一个物质 It isn’t a thing at all 而是时间里的一瞬间 It’s an instant in time 那个瞬间 就是现在 And that time is now. 当我们仰望天空 You see, when we look up into the sky, 望向遥远的恒星和星系时 at distant starts and galaxies, 我们其实是在仰望过去 then we’re looking back in time 因为光从那些遥远天体到达地球需要时间 because the light takes time to journey from them to us. 而光从那个红点处传播到我们这里 And the light from that red dot has been travelling to us 差不多经历了整个宇宙史 for almost the entire history of the universe. 我们看到的是一百三十亿年前 You see, what we’re looking at here is an event that happened 发生的事件 13 billion years ago. 我们看到的是宇宙初期的一颗恒星 What we’re looking at here is the explosive death 爆炸灭亡的景象 of one of the first starts in the universe. 一日为二十四个小时 A day on Earth is the 24 hours 即地球绕轴自转一周 it takes our planet to rotate once on its axis. 一月为二十九天半 Our months are based on the 29-and-a-half days 即月亮在夜空完成盈亏圆缺 it takes the moon to wax and wane in the night sky. 一年为三百六十五天又四分之一天 And a year is the 365-and-a-quarter days 即地球绕太阳公转一周 it takes us to orbit once around the sun. 人类的生命便消逝在这些熟悉的时间量程之内 These familiar timescales mark the passing of our lives. 这是宇宙无法避免的真相 It’s an inescapable fact of the universe, 也被写入了物理学基本定律 written into the fundamental laws of physics, 整个宇宙将消亡 The entire cosmos will die, 银河系中的两千亿恒星将全部消亡 Every single one of the 200 billion starts in our galaxy will go out. 如同太阳末日 便是地球末日 And just as the death of the sun means the end of life on our planet, 每一颗恒星的灭亡 so the death of every star 都可能预示着宇宙中其他某种生命的灭亡 will extinguish any possibility of life in the universe. 永恒的变化是人类生命中最基本的部分 Permanent change is a fundamental part of what it means to be human. 随着时间流逝 我们都会变老We all age as the years pass by. 人们出生 成长 死亡People are born, they live, they die. 我想这只是生命中悲悲喜喜的一部分I suppose it’s part of the joy and tragedy of our lives. 但纵观宇宙But out there in the universe, 那些宏伟的如史诗般的循环好像永恒不变those grand and epic cycles appear eternal and unchanging. 然而这只是错觉But that’s an illlusion. 宇宙长河就如同我们的生命一样You see, in the life of the universe, just in our lives, 一切都在不可逆转地变化everything is irreversibly changing. 我们从没见过浪花离开过湖面We never see waves travelling across lakes.聚集在一起 组成巨大的冰块重回冰川coming together and bouncing chunks of ice back onto glaciers. 我们被迫前往将来We are compelled to travel into the future. 那是因为And that’s because 时间箭头规定 随着时间流逝the arrow of time dictates that as each moment passes, 万物也在发生变化things change. 变化一旦发生 就无法更改And once these changes have happend, they are never undone. 这些循环看似永恒不变These cycles seem eternal and unchanging, 但随着时间之书徐徐展开but as the story of time unfolds, 一条真理跃然眼前afundamental truth is revealed. 没有什么能够永恒Nothing lates forever.","categories":[{"name":"Time","slug":"time","permalink":"https://mhuig.github.io/categories/time/"}],"tags":[{"name":"Time","slug":"time","permalink":"https://mhuig.github.io/tags/time/"}]},{"title":"Hello World","slug":"yuque/Hello World","date":"2020-04-19T06:24:29.000Z","updated":"2020-05-02T13:04:02.740Z","comments":true,"path":"posts/4a17b156.html","link":"","permalink":"https://mhuig.github.io/posts/4a17b156.html","excerpt":"你好，世界！","text":"你好，世界！ 全新的主题，熟悉的代码，怎能不再次心动？ 这是MHuiG的又一个博客！ 原博客数据不再迁移此处，将其作为该博客的子站我的 NoteBook: https://mhuig.github.io/NoteBook/","categories":[{"name":"Hello","slug":"hello","permalink":"https://mhuig.github.io/categories/hello/"}],"tags":[{"name":"Hello","slug":"hello","permalink":"https://mhuig.github.io/tags/hello/"}]}],"categories":[{"name":"实验性","slug":"实验性","permalink":"https://mhuig.github.io/categories/%E5%AE%9E%E9%AA%8C%E6%80%A7/"},{"name":"BigData","slug":"bigdata","permalink":"https://mhuig.github.io/categories/bigdata/"},{"name":"Time","slug":"time","permalink":"https://mhuig.github.io/categories/time/"},{"name":"Hello","slug":"hello","permalink":"https://mhuig.github.io/categories/hello/"}],"tags":[{"name":"实验性","slug":"实验性","permalink":"https://mhuig.github.io/tags/%E5%AE%9E%E9%AA%8C%E6%80%A7/"},{"name":"BigData","slug":"bigdata","permalink":"https://mhuig.github.io/tags/bigdata/"},{"name":"Time","slug":"time","permalink":"https://mhuig.github.io/tags/time/"},{"name":"Hello","slug":"hello","permalink":"https://mhuig.github.io/tags/hello/"}]}